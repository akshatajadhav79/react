URI = mongodb+srv://mosinbalsing:ubwMoJfcS5aLBpQb@cluster0.3eewacv.mongodb.net/mern24?retryWrites=true&w=majority;
URI1 = mongodb://127.0.0.1:27017/mern25
JWT_SECRET_KEY=mosinbalsing


const user = async (req, res) => {
  try {
    // const userData = await User.find({});
    const userData = req.user;
    console.log(userData);
    return res.status(200).json({ msg: userData });
    // return res.status(200).json({ msg: "Hi User"});
  } catch (error) {
    console.log(` error from user route ${error}`);
  }
};




const jwt = require("jsonwebtoken");
const User = require("../models/user-model");

const authMiddleware = async (req, res, next) => {
  const token = req.header("Authorization");

  if (!token) {
    // If you attempt to use an expired token, you'll receive a "401 Unauthorized HTTP" response.
    return res
      .status(401)
      .json({ message: "Unauthorized HTTP, Token not provided" });
  }

  // Assuming token is in the format "Bearer <jwtToken>, Removing the "Bearer" prefix"
  const jwtToken = token.replace("Bearer", "").trim();
  console.log(jwtToken);

  try {
    // Verifying the token
    const isVerified = jwt.verify(jwtToken, process.env.JWT_SECRET_KEY);
    console.log(isVerified);

    // getting the complete user details & also we don't want password to be sent
    const userData = await User.findOne({ email: isVerified.email }).select({
      password: 0,
    });

    req.token = token;
    req.user = userData;
    req.userID = user._id;

    // Move on to the next middleware or route handler
    next();
  } catch (error) {
    return res.status(401).json({ message: "Unauthorized. Invalid token." });
  }
};

module.exports = authMiddleware;





import { useState } from "react";
import { useAuth } from "../store/auth";
export const Contact = () => {
  const [contact, setContact] = useState({
    username: "",
    email: "",
    message: "",
  });
  const [userData , setUserData]= useState(true);
const {user}=useAuth();
if (userData && user) {
  setContact({
    username:user.username,
    email: user.email,
    message:" ",
  });
  setUserData(false); 
}
  // lets tackle our handleInput
  const handleInput = (e) => {
    const name = e.target.name;
    const value = e.target.value;

    setContact({
      ...contact,
      [name]: value,
    });
  };
  const handleSubmit = (e) => {
    e.preventDefault();

    console.log(contact);
  };

//  Help me reach 1 Million subs ðŸ‘‰ https://youtube.com/thapatechnical

  return (
    <>
      <section className="section-contact">
        <div className="contact-content container">
          <h1 className="main-heading">contact us</h1>
        </div>
        {/* contact page main  */}
        <div className="container grid grid-two-cols">
          <div className="contact-img">
            <img src="/images/support.png" alt="we are always ready to help" />
          </div>

           {/* contact form content actual  */}
           <section className="section-form">
           <form onSubmit={handleSubmit}>
             <div>
               <label htmlFor="username">username</label>
               <input
                 type="text"
                 name="username"
                 id="username"
                 autoComplete="off"
                 value={contact.username}
                 onChange={handleInput}
                 required
               />
             </div>

             <div>
               <label htmlFor="email">email</label>
               <input
                 type="email"
                 name="email"
                 id="email"
                 autoComplete="off"
                 value={contact.email}
                 onChange={handleInput}
                 required
                 />
               </div>
 
               <div>
                 <label htmlFor="message">message</label>
                 <textarea
                   name="message"
                   id="message"
                   autoComplete="off"
                   value={contact.message}
                   onChange={handleInput}
                   required
                   cols="30"
                   rows="6"
                 ></textarea>
               </div>
 
               <div>
                 <button type="submit">submit</button>
               </div>
             </form>
           </section>
         </div>
         <section className="mb-3">
          <iframe
            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3782.2613173278896!2d73.91411937501422!3d18.562253982539413!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3bc2c147b8b3a3bf%3A0x6f7fdcc8e4d6c77e!2sPhoenix%20Marketcity%20Pune!5e0!3m2!1sen!2sin!4v1697604225432!5m2!1sen!2sin"
            width="100%"
            height="450"
            allowFullScreen
            loading="lazy"
            referrerPolicy="no-referrer-when-downgrade"
          ></iframe>
        </section>
      </section>
    </>
  );
};